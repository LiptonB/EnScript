class MainClass;

class FindEvidenceDialogClass: DialogClass {
  MainClass Main;
  PathEditClass EvidenceDirectoryEdit;
  PathEditClass CaseFileEdit;
  ListEditClass ListEdit;
  DirRootClass DirRoot;

  FindEvidenceDialogClass(DialogClass parent, MainClass main) :
    DialogClass(parent, "Evidence Selection Dialog"),
    Main = main,
    EvidenceDirectoryEdit(this, "Evidence directory", START, START, 200, 12, 0, main.EvidenceDirectory, FOLDEROPEN),
    ListEdit(this, "Files in directory", START, NEXT, 200, 75, 0, main.FileList, ContextClass::CANCHECK),
    CaseFileEdit(this, "Case file", START, NEXT, 200, 12, 0, main.CaseFile, FILECREATE, "EnCase case files\t*.case\tAll Files\t*.*\t"),
    DirRoot(LocalMachine)
  {}

  virtual void ChildEvent(const EventClass &evt) {
    DialogClass::ChildEvent(evt);
    if (EvidenceDirectoryEdit.Matches(evt)) {
      String newPath = EvidenceDirectoryEdit.GetText();
      DirectoryClass dir();
      NameListClass FileList();
      if (DirRoot.GetListing(newPath, dir)) {
        foreach (DirectoryClass file in dir) {
          new NameListClass(FileList, file.FullPath());
        }
      }
      ListEdit.SetDataRoot(FileList);
      Main.FileList = FileList;
    }
  }
}

class MainClass {
  String EvidenceDirectory;
  NameListClass FileList;
  String CaseFile;

  MainClass() :
    FileList()
  {}

  void Main() {

    FindEvidenceDialogClass diag(null, this);
    if (diag.Execute() == SystemClass::OK) {
      Console.WriteLine("Path selected: " + EvidenceDirectory);
      foreach(NodeClass node in FileList) {
        if (node.IsSelected()) {
          Console.WriteLine("Selected File: " + node.Name());
        }
      }
    }

    CaseClass newCase(null, "This is a case created by Enscript");

    foreach (NodeClass node in FileList) {
      if (node.IsSelected()) {
        String filename = EvidenceDirectory +
          (EvidenceDirectory.SubString(EvidenceDirectory.GetLength() - 1, 1) == "\\" ? "" : "\\") +
          node.Name();
        EvidenceClass ev();
        EvidencePathClass evPath(ev.EvidencePathRoot(), filename);
        EvidenceOpenClass evOpen();
        String extension = filename.GetFileExt();
        if (extension == "img") {
          ev.SetOpenMode(EvidenceClass::OPENRAWIMAGE);
        } else if (extension == "E01") {
          ev.SetOpenMode(EvidenceClass::OPENEVIDENCEFILE);
        } else {
          Console.WriteLine("Skipping " + filename + " - unknown extension");
          continue;
        }
        if (ev.AddToCase(newCase, evOpen)) {
          Console.WriteLine("Added " + filename + " to case successfully");
        } else {
          Console.WriteLine("Could not add " + filename + " to case");
        }
      }
    }

    if (newCase.Write(CaseFile)) {
      Console.WriteLine(String::Format("Success, case saved to {0}", CaseFile));
    } else {
      Console.WriteLine(String::Format("Failed to save the case to {0}", CaseFile));
    }
  }
}

//This Code will search for the files with the extention of SPL and export the file to c:\temo directory, if the file content is ANSI the code will also display that on console
/*
class MainClass {
  void Main(CaseClass c) {
    int notWorks;
    uint opts;
    String outPath = "C:\\temp\\";
    EntryFileClass ef();
    uint count;
    for(ItemIteratorClass i(c); EntryClass e = i.GetNextEntry();) {
      if (e.Extension() == "SPL") {
        if (ef.Open(e, opts)) {
          String contents;
          ef.SetCodePage(CodePageClass::ANSI);
          ef.ReadString(contents);
          Console.WriteLine("file contents");
          Console.WriteLine(contents);
          Console.WriteLine("*************");
          LocalFileClass lf();
          String name = outPath + e.Name() + "_" + count;
          if (lf.Open(name, FileClass::WRITE)) {
            lf.WriteBuffer(ef);
            Console.WriteLine("File Created:" + name);
            count++;
            lf.Close();
          } else
            notWorks++;
          ef.Close();
        }
        else {
          Console.WriteLine("Could Not Open " + e.FullPath());
          notWorks++;
        }
      }
    }
  }
}
*/
